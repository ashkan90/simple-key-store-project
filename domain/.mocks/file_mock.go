// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/helper/file.go

// Package mock_helper is a generated GoMock package.
package mock_helper

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIOUtil is a mock of IOUtil interface.
type MockIOUtil struct {
	ctrl     *gomock.Controller
	recorder *MockIOUtilMockRecorder
}

// MockIOUtilMockRecorder is the mock recorder for MockIOUtil.
type MockIOUtilMockRecorder struct {
	mock *MockIOUtil
}

// NewMockIOUtil creates a new mock instance.
func NewMockIOUtil(ctrl *gomock.Controller) *MockIOUtil {
	mock := &MockIOUtil{ctrl: ctrl}
	mock.recorder = &MockIOUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOUtil) EXPECT() *MockIOUtilMockRecorder {
	return m.recorder
}

// ReadFromFile mocks base method.
func (m *MockIOUtil) ReadFromFile(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadFromFile indicates an expected call of ReadFromFile.
func (mr *MockIOUtilMockRecorder) ReadFromFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromFile", reflect.TypeOf((*MockIOUtil)(nil).ReadFromFile), arg0)
}

// WriteToFile mocks base method.
func (m *MockIOUtil) WriteToFile(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteToFile indicates an expected call of WriteToFile.
func (mr *MockIOUtilMockRecorder) WriteToFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToFile", reflect.TypeOf((*MockIOUtil)(nil).WriteToFile), arg0)
}
